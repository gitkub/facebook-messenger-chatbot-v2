#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Local Interactive Testing for Facebook Messenger Chatbot
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö interactive ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
"""

import os
from intent_detector import IntentDetector

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö interactive"""

    # Load API key from environment or .env file
    api_key = os.getenv('OPENAI_API_KEY')

    if not api_key or api_key == 'test-key':
        print("‚ö†Ô∏è  Warning: No valid OpenAI API key found.")
        print("   Please set OPENAI_API_KEY environment variable or update .env file")
        print("   Smart fallback responses will show error messages.")
        api_key = 'test-key'
        print()

    # Initialize chatbot
    print("ü§ñ Loading chatbot...")
    detector = IntentDetector(api_key)
    print("‚úÖ Chatbot ready!")
    print()

    # Welcome message
    print("=" * 60)
    print("üß™ Facebook Messenger Chatbot - Local Testing")
    print("=" * 60)
    print("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("  - ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    print("  - ‡∏û‡∏¥‡∏°‡∏û‡πå 'reset' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤")
    print("  - ‡∏û‡∏¥‡∏°‡∏û‡πå 'quit' ‡∏´‡∏£‡∏∑‡∏≠ 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å")
    print("=" * 60)
    print()

    user_id = "local_test_user"

    try:
        while True:
            # Get user input
            try:
                user_input = input("üë§ ‡∏Ñ‡∏∏‡∏ì: ").strip()
            except (EOFError, KeyboardInterrupt):
                print("\n\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break

            # Handle special commands
            if user_input.lower() in ['quit', 'exit', '‡∏≠‡∏≠‡∏Å', 'q']:
                print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
                break

            if user_input.lower() in ['reset', '‡∏•‡πâ‡∏≤‡∏á', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà']:
                # Reset user context
                if hasattr(detector, 'user_contexts') and user_id in detector.user_contexts:
                    del detector.user_contexts[user_id]
                print("üîÑ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
                print()
                continue

            if not user_input:
                continue

            # Process message
            try:
                result = detector.process_message(user_input, user_id)

                # Show response
                reply = result.get('reply')
                if reply:
                    print(f"ü§ñ ‡∏ö‡∏≠‡∏ó: {reply}")
                else:
                    print("ü§ñ ‡∏ö‡∏≠‡∏ó: [‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö - ‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô manual mode]")

                # Show debug info
                detected_intent = result.get('detected_intent', 'unknown')
                used_intent = result.get('used_intent', 'unknown')
                confidence = result.get('confidence', 0.0)

                print(f"üîç Debug: detected='{detected_intent}' ‚Üí used='{used_intent}' (conf: {confidence:.2f})")

                # Show order info if available
                order_info = result.get('order_info', {})
                if order_info and any(order_info.values()):
                    print(f"üìã Order: {order_info}")

                print()

            except Exception as e:
                print(f"‚ùå Error: {e}")
                print()

    except KeyboardInterrupt:
        print("\n\nüëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")

if __name__ == "__main__":
    main()