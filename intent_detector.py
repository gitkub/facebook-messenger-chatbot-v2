import json
import re
import openai
from typing import Dict, Any
from pydantic import BaseModel

class IntentResult(BaseModel):
    intent: str
    confidence: float
    reason: str

class IntentDetector:
    def __init__(self, openai_api_key: str, replies_file: str = "replies.json", context_file: str = "business_context.json"):
        self.client = openai.OpenAI(api_key=openai_api_key)
        self.replies = self._load_replies(replies_file)
        self.business_context = self._load_business_context(context_file)
        self.product_images = self._load_product_images("product_images.json")
        self.user_contexts = {}  # ‡πÄ‡∏Å‡πá‡∏ö context ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° user_id

    def _get_user_context(self, user_id: str) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user"""
        if user_id not in self.user_contexts:
            self.user_contexts[user_id] = {
                'last_intent': None,
                'last_message': None,
                'order_info': {},
                'manual_mode': False,
                'conversation_history': []
            }
        return self.user_contexts[user_id]

    def _load_replies(self, file_path: str) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• intents ‡πÅ‡∏•‡∏∞ replies ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Warning: {file_path} not found. Using empty replies.")
            return {}

    def _load_business_context(self, file_path: str) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Info: {file_path} not found. Running without business context.")
            return {}

    def _load_product_images(self, file_path: str) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"Info: {file_path} not found. Running without product images.")
            return {}

    def _generate_smart_fallback(self, message: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏à‡∏≤‡∏Å business context ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö intent ‡πÑ‡∏î‡πâ"""
        try:
            business_info = self.business_context.get('business_info', {})

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
            prompt = f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏î‡∏µ

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤:
{json.dumps(business_info, ensure_ascii=False, indent=2)}

‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°: "{message}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢:
1. ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
2. ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
3. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≠‡∏ö:
   - ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ‡∏ú‡πâ‡∏≤ ‡∏ß‡∏±‡∏™‡∏î‡∏∏ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏• ‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏•‡∏≠‡∏î ‡πÑ‡∏ã‡∏™‡πå ‡∏™‡∏µ
   - ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô
   - ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á ‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏ú‡∏•‡∏¥‡∏ï ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏ã‡∏™‡πå
4. ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏•‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏Å‡∏µ‡∏¨‡∏≤ ‡∏Ç‡πà‡∏≤‡∏ß) ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏â‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞"
5. **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1-2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏´‡πâ‡∏≤‡∏°‡∏¢‡∏≤‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏°‡∏≤‡∏Å**
6. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏£‡∏±‡∏ö

‡∏ï‡∏≠‡∏ö:"""

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=200,
                temperature=0.7
            )

            return response.choices[0].message.content.strip()

        except Exception as e:
            print(f"Error generating smart fallback: {e}")
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞"

    def detect_intent(self, message: str, user_context: Dict[str, Any]) -> IntentResult:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPT
        available_intents = list(self.replies.keys())
        available_intents.remove('fallback')  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ GPT ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å fallback

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô context
        business_info = ""
        if self.business_context and "business_info" in self.business_context:
            business_info = f"""
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à:
{json.dumps(self.business_context['business_info'], ensure_ascii=False, indent=2)}

‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢: ‡∏î‡∏≥, ‡∏Ç‡∏≤‡∏ß, ‡∏Ñ‡∏£‡∏µ‡∏°, ‡∏ä‡∏°‡∏û‡∏π, ‡∏ü‡πâ‡∏≤, ‡πÄ‡∏ó‡∏≤, ‡πÇ‡∏Å‡πÇ‡∏Å‡πâ, ‡∏Å‡∏£‡∏°
‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ: M, L, XL, XXL
"""

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° context ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        conversation_context = ""
        if user_context.get('last_intent') in ["color_with_quantity", "color_multiple"]:
            conversation_context = f"""
üö® ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß (intent: {user_context.get('last_intent')})
‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (M, L, XL, XXL) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å size_after_color_quantity
‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å size_only ‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
"""

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ (sliding window)
        conversation_history = ""
        history = user_context.get('conversation_history', [])
        if history:
            # ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
            history_text = "\n".join([f"- {msg['role']}: {msg['content']}" for msg in history])
            conversation_history = f"""
‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
{history_text}
"""

        prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à (intent) ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ñ‡∏ô‡∏ó‡πâ‡∏≠‡∏á
{business_info}{conversation_context}{conversation_history}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "{message}"

Intent ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:
{json.dumps({k: v['description'] for k, v in self.replies.items() if k != 'fallback'}, ensure_ascii=False, indent=2)}

‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠:
- order_confirm: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏£‡∏ö ‡∏™‡∏µ + ‡πÑ‡∏ã‡∏™‡πå + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏≠‡∏≤‡∏™‡∏µ‡∏î‡∏≥ L 2 ‡∏ï‡∏±‡∏ß", "‡∏î‡∏≥ M 3 ‡∏ï‡∏±‡∏ß")
- color_with_quantity: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå (‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏≥ 3 ‡∏ï‡∏±‡∏ß", "‡∏î‡∏≥2 ‡∏Ñ‡∏£‡∏µ‡∏°1", "‡∏Ç‡∏≤‡∏ß 2", "‡∏î‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡∏Ñ‡πà‡∏∞")
- color_multiple: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏≥ ‡∏Ç‡∏≤‡∏ß ‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ä‡∏°‡∏û‡∏π ‡πÄ‡∏ó‡∏≤" (‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ = ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
- size_multiple: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏ã‡∏™‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô "M L XL", "M M L", "L L L", "XL XXL"
- size_after_color_quantity: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏ä‡πà‡∏ô "M" ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å "‡∏î‡∏≥ 3 ‡∏ï‡∏±‡∏ß")
- color: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏≥", "‡πÄ‡∏≠‡∏≤‡∏™‡∏µ‡∏î‡∏≥")
- size_only: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "M", "L", "XL", "XXL")
- quantity_only: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "1 ‡∏ï‡∏±‡∏ß", "2 ‡∏ï‡∏±‡∏ß", "3 ‡∏ï‡∏±‡∏ß")
- payment_transfer: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡πÇ‡∏≠‡∏ô", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", "PromptPay")
- payment_cod: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "COD")
- address_received: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ä‡∏∑‡πà‡∏≠ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£)
- address_incomplete: ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
- ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏™‡∏µ + ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å color_with_quantity ‡πÄ‡∏™‡∏°‡∏≠ (‡∏î‡∏≥ 3, ‡∏Ç‡∏≤‡∏ß2, ‡∏î‡∏≥2‡∏Ñ‡∏£‡∏µ‡∏°1, ‡∏î‡∏≥ 3 ‡∏ï‡∏±‡∏ß‡∏Ñ‡πà‡∏∞)
- ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å color_multiple ‡πÄ‡∏™‡∏°‡∏≠ (‡∏î‡∏≥ ‡∏Ç‡∏≤‡∏ß ‡∏Ñ‡∏£‡∏µ‡∏° = 3 ‡∏ï‡∏±‡∏ß, ‡∏ä‡∏°‡∏û‡∏π ‡πÄ‡∏ó‡∏≤ = 2 ‡∏ï‡∏±‡∏ß)
- ‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å order_confirm ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå (M, L, XL, XXL) ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏Ñ‡πà‡∏∞" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Ñ‡∏£‡∏±‡∏ö"
- ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (M L XL, M M L) ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å size_multiple ‡πÄ‡∏™‡∏°‡∏≠
- ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ß‡πà‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å size_after_color_quantity
- ‚ö†Ô∏è ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å size_only ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
- üí≥ ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "‡πÇ‡∏≠‡∏ô", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", "COD", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á" ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å payment_cod ‡∏´‡∏£‡∏∑‡∏≠ payment_transfer
- color_with_quantity ‡πÅ‡∏•‡∏∞ color_multiple ‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ order_confirm ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
  "intent": "‡∏ä‡∏∑‡πà‡∏≠ intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏´‡∏£‡∏∑‡∏≠ 'none' ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢",
  "confidence": ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à 0.0-1.0,
  "reason": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å intent ‡∏ô‡∏µ‡πâ"
}}

‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Å‡∏ì‡∏ë‡πå:
- confidence ‚â• 0.45 ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á
- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà "none" ‡πÅ‡∏•‡∏∞ confidence ‡∏ï‡πà‡∏≥
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=200
            )

            # Parse JSON response
            result_text = response.choices[0].message.content.strip()

            # ‡∏•‡∏ö markdown code block ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if result_text.startswith('```json'):
                result_text = result_text[7:-3]
            elif result_text.startswith('```'):
                result_text = result_text[3:-3]

            result_data = json.loads(result_text)

            return IntentResult(
                intent=result_data.get('intent', 'none'),
                confidence=float(result_data.get('confidence', 0.0)),
                reason=result_data.get('reason', 'No reason provided')
            )

        except Exception as e:
            print(f"Error in intent detection: {e}")
            return IntentResult(
                intent='none',
                confidence=0.0,
                reason=f'Error: {str(e)}'
            )

    def _extract_color_quantity(self, message: str) -> Dict[str, Any]:
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""

        colors = ["‡πÇ‡∏Å‡πÇ‡∏Å‡πâ", "‡πÇ‡∏Å‡πÇ‡∏Å", "‡∏î‡∏≥", "‡∏Ç‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ä‡∏°‡∏û‡∏π", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏ó‡∏≤", "‡∏Å‡∏£‡∏°"]
        result = {'colors': [], 'total_quantity': 0}

        # ‡πÉ‡∏ä‡πâ regex pattern ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏°‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        for color in colors:
            # ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: "‡∏î‡∏≥ 2", "‡∏î‡∏≥2"
            pattern = rf"{color}\s*(\d+)"
            matches = re.findall(pattern, message)

            for match in matches:
                quantity = int(match)
                result['colors'].append({'color': color, 'quantity': quantity})
                result['total_quantity'] += quantity

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©: "‡πÄ‡∏≠‡∏≤ 33" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏±‡∏ö 2 ‡∏ï‡∏±‡∏ß" ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏£‡∏∞‡∏ö‡∏∏
        if result['total_quantity'] == 0:
            numbers = re.findall(r'\d+', message)
            if numbers and not any(color in message for color in colors):
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                qty = int(numbers[0])  # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                result['total_quantity'] = qty
                return result

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏™‡∏µ ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ (1 ‡∏™‡∏µ = 1 ‡∏ï‡∏±‡∏ß)
        if result['total_quantity'] == 0:
            found_colors = []
            message_remaining = message

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡πÇ‡∏Å‡πÇ‡∏Å‡πâ" ‡∏Å‡πà‡∏≠‡∏ô "‡∏î‡∏≥")
            sorted_colors = sorted(colors, key=len, reverse=True)

            # ‡∏à‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô "‡∏î‡∏≥ ‡∏Ç‡∏≤‡∏ß")
            for color in sorted_colors:
                # ‡∏´‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                patterns = [
                    rf'(?:^|\s){re.escape(color)}(?:\s|$)',  # ‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                ]

                for pattern in patterns:
                    if re.search(pattern, message_remaining):
                        found_colors.append(color)
                        message_remaining = re.sub(pattern, ' ', message_remaining, count=1)
                        break

            # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡∏à‡∏±‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
            for color in sorted_colors:
                if color not in found_colors and color in message_remaining:
                    found_colors.append(color)
                    message_remaining = message_remaining.replace(color, '', 1)

            if found_colors:
                for color in found_colors:
                    result['colors'].append({'color': color, 'quantity': 1})
                result['total_quantity'] = len(found_colors)

        return result

    def _suggest_size_by_waist(self, waist_size: int) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß"""
        if waist_size <= 36:
            if waist_size <= 32:
                return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå M (‡πÄ‡∏≠‡∏ß 28-36) ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞"
            else:
                return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå M ‡∏´‡∏£‡∏∑‡∏≠ L ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞\n‚Ä¢ M (‡πÄ‡∏≠‡∏ß 28-36) - ‡∏û‡∏≠‡∏î‡∏µ\n‚Ä¢ L (‡πÄ‡∏≠‡∏ß 32-40) - ‡∏´‡∏•‡∏ß‡∏°‡∏™‡∏ö‡∏≤‡∏¢"
        elif waist_size <= 40:
            if waist_size <= 36:
                return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå L (‡πÄ‡∏≠‡∏ß 32-40) ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞"
            else:
                return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå L ‡∏´‡∏£‡∏∑‡∏≠ XL ‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏∞\n‚Ä¢ L (‡πÄ‡∏≠‡∏ß 32-40) - ‡∏û‡∏≠‡∏î‡∏µ\n‚Ä¢ XL (‡πÄ‡∏≠‡∏ß 36-42) - ‡∏´‡∏•‡∏ß‡∏°‡∏™‡∏ö‡∏≤‡∏¢"
        elif waist_size <= 42:
            return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå XL (‡πÄ‡∏≠‡∏ß 36-42) ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞"
        elif waist_size <= 50:
            return "üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå XXL (‡πÄ‡∏≠‡∏ß 40-50) ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞"
        else:
            return "üéØ ‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ (XXL ‡πÄ‡∏≠‡∏ß 40-50)\n‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡∏Ñ‡πà‡∏∞"

    def _analyze_address(self, message: str) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á"""

        result = {
            'has_name': False,
            'has_address': False,
            'has_phone': False,
            'extracted_name': '',
            'extracted_address': '',
            'extracted_phone': ''
        }

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢)
        phone_patterns = [
            r'Tel:\s*(\d{3}-\d{3}-\d{4})',      # Tel:083-998-9896
            r'‡πÇ‡∏ó‡∏£\s+(\d{3}-\d{3}-\d{4})',       # ‡πÇ‡∏ó‡∏£ 083-038-9746
            r'\(\s*‡πÇ‡∏ó‡∏£\s+(\d{3}-\d{3}-\d{4})\)', # (‡πÇ‡∏ó‡∏£ 083-038-9746)
            r'(\d{3}-\d{3}-\d{4})',             # 064-653-6992, 098-827-3472
            r'(\d{3}\s?\d{3}\s?\d{4})',         # 064 653 6992, 0646536992
            r'\((\d{10,11})\)',                 # (0937619828)
            r'(\d{10,11})',                     # 0812345678, 081234567
        ]

        for pattern in phone_patterns:
            phone_match = re.search(pattern, message)
            if phone_match:
                result['has_phone'] = True
                # ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å group ‡∏ó‡∏µ‡πà 1 (‡πÉ‡∏ô parentheses) ‡∏´‡∏£‡∏∑‡∏≠ group 0
                phone_number = phone_match.group(1) if phone_match.groups() else phone_match.group(0)
                # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÄ‡∏≠‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å)
                phone_clean = re.sub(r'[\s\-\(\)]', '', phone_number)
                result['extracted_phone'] = phone_clean
                break

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏û‡∏¥‡πà‡∏° keywords ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢)
        address_keywords = [
            # ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            '‡∏ö‡πâ‡∏≤‡∏ô', '‡∏ñ‡∏ô‡∏ô', '‡∏ã‡∏≠‡∏¢', '‡∏ï‡∏≥‡∏ö‡∏•', '‡∏≠‡∏≥‡πÄ‡∏†‡∏≠', '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î', '‡∏´‡∏°‡∏π‡πà',
            # ‡∏¢‡πà‡∏≠
            '‡∏°.', '‡∏ï.', '‡∏≠.', '‡∏à.', '‡∏ñ.',
            # ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û
            '‡πÅ‡∏Ç‡∏ß‡∏á', '‡πÄ‡∏Ç‡∏ï', '‡∏Å‡∏ó‡∏°', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
            # ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            '‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô', '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£', '‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏î', '‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó', 'Add:', 'Add', 'Address'
        ]

        has_number = bool(re.search(r'\d+', message))
        has_address_keyword = any(keyword.lower() in message.lower() for keyword in address_keywords)

        if has_number and has_address_keyword:
            result['has_address'] = True
            # ‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤ (‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏≠‡∏≠‡∏Å)
            address_text = message
            for pattern in phone_patterns:
                address_text = re.sub(pattern, '', address_text)
            # ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            address_text = re.sub(r'Tel:\s*|‡πÇ‡∏ó‡∏£\s*|‡πÄ‡∏ö‡∏≠‡∏£‡πå\s*|\(\s*‡πÇ‡∏ó‡∏£\s*|\)', '', address_text).strip()
            result['extracted_address'] = address_text

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô)
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        clean_message = message
        for pattern in phone_patterns:
            clean_message = re.sub(pattern, '', clean_message)
        clean_message = re.sub(r'Tel:\s*|‡πÇ‡∏ó‡∏£\s*|‡πÄ‡∏ö‡∏≠‡∏£‡πå\s*|\(\s*‡πÇ‡∏ó‡∏£\s*|\)|Add:\s*|Address:\s*', '', clean_message)

        words = clean_message.split()
        name_words = []

        # ‡∏ä‡∏∑‡πà‡∏≠ indicators
        name_indicators = ['‡∏ô‡∏≤‡∏¢', '‡∏ô‡∏≤‡∏á', '‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß', '‡∏Ñ‡∏∏‡∏ì', '‡∏£‡πâ‡∏≤‡∏ô', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏´‡πâ‡∏≤‡∏á', 'Mr.', 'Mrs.', 'Ms.']

        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô indicators ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÜ
        found_indicator = False
        for i, word in enumerate(words):
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ indicator ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            if any(indicator in word for indicator in name_indicators):
                found_indicator = True
                name_words.append(word)
                # ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•)
                if i + 1 < len(words) and not any(keyword.lower() in words[i+1].lower() for keyword in address_keywords):
                    if not re.search(r'\d{3,}', words[i+1]):  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
                        name_words.append(words[i+1])
                break

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ indicator ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà address keywords
        if not found_indicator:
            for word in words[:4]:  # ‡∏î‡∏π 4 ‡∏Ñ‡∏≥‡πÅ‡∏£‡∏Å
                if not any(keyword.lower() in word.lower() for keyword in address_keywords):
                    if not re.search(r'\d{3,}', word):  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
                        if not re.search(r'[\d\-\(\)]', word):  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                            name_words.append(word)
                            if len(name_words) >= 2:  # ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏Ñ‡∏≥
                                break

        if len(name_words) >= 1:
            result['has_name'] = True
            result['extracted_name'] = ' '.join(name_words)

        return result

    def _calculate_price(self, quantity: int) -> Dict[str, Any]:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"""
        if quantity >= 3:
            price = 490
            shipping = 0
            total = 490
            note = f"‡∏ï‡∏±‡∏ß‡∏•‡∏∞ {490//quantity} ‡∏ö‡∏≤‡∏ó + ‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ"
        elif quantity == 2:
            price = 340
            shipping = 30
            total = 370
            note = f"‡∏ï‡∏±‡∏ß‡∏•‡∏∞ {340//quantity} ‡∏ö‡∏≤‡∏ó"
        else:
            price = 180
            shipping = 30
            total = 210
            note = "‡∏ï‡∏±‡∏ß‡∏•‡∏∞ 180 ‡∏ö‡∏≤‡∏ó"

        return {
            'price': price,
            'shipping': shipping,
            'total': total,
            'note': note
        }

    def get_reply(self, intent: str, message: str = '', user_context: Dict[str, Any] = None) -> str:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏° intent"""
        if intent in self.replies and intent != 'fallback':
            reply = self.replies[intent]['reply']

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô size_after_color_quantity ‡∏´‡∏£‡∏∑‡∏≠ order_confirm ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            if intent in ['size_after_color_quantity', 'order_confirm'] and user_context and user_context.get('order_info'):
                order_info = user_context['order_info']
                colors_text = ", ".join([f"{item['color']} {item['quantity']} ‡∏ï‡∏±‡∏ß" for item in order_info.get('colors', [])])
                size = order_info.get('size', '')
                total_quantity = order_info.get('total_quantity', 0)
                price_info = self._calculate_price(total_quantity)

                reply = reply.replace('[‡∏™‡∏µ]', colors_text)
                reply = reply.replace('[‡πÑ‡∏ã‡∏™‡πå]', size)
                reply = reply.replace('[‡∏à‡∏≥‡∏ô‡∏ß‡∏ô]', str(total_quantity))
                reply = reply.replace('[‡∏¢‡∏≠‡∏î]', str(price_info['total']))

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô address_received ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            elif intent == 'address_received' and user_context and user_context.get('order_info', {}).get('address_info'):
                addr_info = user_context['order_info']['address_info']
                reply = reply.replace('[‡∏ä‡∏∑‡πà‡∏≠]', addr_info.get('extracted_name', ''))
                reply = reply.replace('[‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà]', addr_info.get('extracted_address', ''))
                reply = reply.replace('[‡πÄ‡∏ö‡∏≠‡∏£‡πå]', addr_info.get('extracted_phone', ''))

            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô size_recommendation ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå
            elif intent == 'size_recommendation':
                waist_match = re.search(r'‡πÄ‡∏≠‡∏ß\s*(\d+)', message)
                if waist_match:
                    waist_size = int(waist_match.group(1))
                    size_suggestion = self._suggest_size_by_waist(waist_size)
                    reply = reply.replace('[size_suggestion]', size_suggestion)
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                    reply = reply.replace('[size_suggestion]', "üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ñ‡πà‡∏∞")

            return reply
        else:
            return self.replies.get('fallback', {}).get('reply', '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡πà‡∏∞')

    def process_message(self, message: str, user_id: str = "default", confidence_threshold: float = 0.45) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö"""
        # ‡∏î‡∏∂‡∏á context ‡∏Ç‡∏≠‡∏á user ‡∏ô‡∏µ‡πâ
        user_context = self._get_user_context(user_id)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö manual mode - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô manual mode ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏≠‡∏ö
        if user_context.get('manual_mode', False):
            return {
                'detected_intent': 'manual_mode',
                'confidence': 1.0,
                'reason': 'User is in manual mode - admin handling required',
                'used_intent': 'manual_mode',
                'reply': None,  # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                'original_message': message,
                'order_info': user_context['order_info'].copy(),
                'manual_mode': True
            }

        intent_result = self.detect_intent(message, user_context)

        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ fallback
        if intent_result.confidence >= confidence_threshold and intent_result.intent != 'none':
            used_intent = intent_result.intent
        else:
            used_intent = 'smart_fallback'

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç intent ‡∏ï‡∏≤‡∏° business logic ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if user_context.get('last_intent') in ["color_with_quantity", "color_multiple"] and used_intent == "size_only":
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏ã‡∏™‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô size_after_color_quantity
            sizes = ["M", "L", "XL", "XXL"]
            if any(size in message.upper() for size in sizes):
                used_intent = "size_after_color_quantity"

        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô+‡πÑ‡∏ã‡∏™‡πå‡∏Ñ‡∏£‡∏ö
        if used_intent in ["color_with_quantity", "order_confirm"]:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            sizes = ["M", "L", "XL", "XXL"]
            has_size = any(size in message.upper() for size in sizes)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            color_info = self._extract_color_quantity(message)
            has_color_quantity = color_info.get('total_quantity', 0) > 0

            if has_color_quantity and has_size:
                # ‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏µ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏ã‡∏™‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô order_confirm
                used_intent = "order_confirm"
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏ã‡∏™‡πå
                user_context['order_info'].update(color_info)
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ã‡∏™‡πå (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ XXL ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô XL)
                sizes_ordered = ["XXL", "XL", "M", "L"]
                for size in sizes_ordered:
                    if size in message.upper():
                        user_context['order_info']['size'] = size
                        break
            elif has_color_quantity and not has_size:
                # ‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏µ+‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ã‡∏™‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô color_with_quantity
                used_intent = "color_with_quantity"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î)
        has_waist_measurement = re.search(r'‡πÄ‡∏≠‡∏ß\s*(\d+)', message)
        has_height_measurement = re.search(r'‡∏™‡∏π‡∏á\s*(\d+)', message)
        size_rec_keywords = ["‡πÑ‡∏ã‡∏™‡πå‡πÑ‡∏´‡∏ô‡∏î‡∏µ", "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏ã‡∏™‡πå", "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ã‡∏™‡πå‡πÑ‡∏´‡∏ô"]
        has_size_question = any(keyword in message for keyword in size_rec_keywords)

        # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÑ‡∏ã‡∏™‡πå‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÉ‡∏™‡πà" ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÑ‡∏ã‡∏™‡πå
        is_usage_question = "‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" in message or "‡∏≠‡∏≠‡∏Å‡∏á‡∏≤‡∏ô" in message or "‡∏ô‡∏≠‡∏ô" in message

        if (has_waist_measurement or has_height_measurement or has_size_question) and not is_usage_question:
            used_intent = "size_recommendation"

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if has_waist_measurement:
                pass  # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏°‡∏≤‡∏Å (‡∏•‡∏î‡∏Å‡∏≤‡∏£ override)
        clear_price_patterns = [
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà", "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£", "‡∏Å‡∏µ‡πà‡∏ö‡∏≤‡∏ó", "‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£", "‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà"
        ]

        # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ã‡∏™‡πå
        has_clear_price_question = any(pattern in message for pattern in clear_price_patterns)
        colors = ["‡πÇ‡∏Å‡πÇ‡∏Å‡πâ", "‡πÇ‡∏Å‡πÇ‡∏Å", "‡∏î‡∏≥", "‡∏Ç‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ä‡∏°‡∏û‡∏π", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏ó‡∏≤", "‡∏Å‡∏£‡∏°"]
        sizes = ["M", "L", "XL", "XXL"]
        has_color = any(color in message for color in colors)
        has_size = any(size in message.upper() for size in sizes)

        if has_clear_price_question and not has_color and not has_size:
            used_intent = "price"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö COD inquiry patterns (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á)
        cod_inquiry_patterns = [
            "‡∏ö‡∏ß‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°", "‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤", "‡∏ö‡∏ß‡∏Å‡∏Ñ‡πà‡∏≤",
            "‡πÄ‡∏û‡∏¥‡πà‡∏°", "‡∏ö‡∏ß‡∏Å", "‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°"
        ]
        cod_words = ["‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "COD", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"]

        has_cod_inquiry = any(pattern in message for pattern in cod_inquiry_patterns)
        has_cod_word = any(word in message for word in cod_words)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö greeting patterns - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á exact ‡πÅ‡∏•‡∏∞‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        greeting_keywords = ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ", "hello", "hi", "‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢", "‡∏™‡∏ô‡πÉ‡∏à"]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
        has_greeting = any(keyword in message.lower() for keyword in greeting_keywords)
        has_specific_question = any(word in message for word in ["‡∏£‡∏≤‡∏Ñ‡∏≤", "‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà", "‡πÑ‡∏ã‡∏™‡πå", "‡∏™‡∏µ", "‡∏ú‡πâ‡∏≤", "‡∏ß‡∏±‡∏™‡∏î‡∏∏"])

        if has_greeting and not has_specific_question:
            used_intent = "greeting"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö image request intents
        image_patterns = {
            "show_product_image": [
                "‡∏Ç‡∏≠‡∏î‡∏π‡∏™‡∏µ", "‡∏î‡∏π‡∏™‡∏µ", "‡∏î‡∏π‡∏£‡∏π‡∏õ", "‡∏Ç‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ", "‡∏£‡∏π‡∏õ‡∏™‡∏µ", "‡∏£‡∏π‡∏õ‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á"
            ],
            "show_size_chart": [
                "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏ã‡∏™‡πå", "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î", "‡∏î‡∏π‡πÑ‡∏ã‡∏™‡πå", "‡∏Ç‡∏≠‡∏î‡∏π‡πÑ‡∏ã‡∏™‡πå"
            ],
            "show_catalog": [
                "‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Å", "‡πÅ‡∏Ñ‡∏ï‡∏≤‡∏•‡πá‡∏≠‡∏Ñ", "‡πÅ‡∏Ñ‡∏ï‡∏ï‡∏∞‡∏•‡πá‡∏≠‡∏Å", "‡∏î‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            ]
        }

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö image patterns
        image_intent_found = False
        for intent_name, patterns in image_patterns.items():
            if any(pattern in message for pattern in patterns):
                used_intent = intent_name
                image_intent_found = True
                break

        # ‡∏•‡∏ö product info override - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á smart fallback ‡πÅ‡∏ó‡∏ô

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment response patterns ‡∏Å‡πà‡∏≠‡∏ô (‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á)
        payment_cod_response_patterns = [
            "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡πà‡∏∞", "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏à‡πâ‡∏≤", "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡∏∞",
            "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡πà‡∏∞", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏à‡πâ‡∏≤", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡∏ö",
            "COD‡∏Ñ‡πà‡∏∞", "COD‡∏à‡πâ‡∏≤", "cod‡∏Ñ‡πà‡∏∞", "cod‡∏à‡πâ‡∏≤"
        ]
        payment_transfer_response_patterns = [
            "‡πÇ‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞", "‡πÇ‡∏≠‡∏ô‡∏à‡πâ‡∏≤", "‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö", "‡πÇ‡∏≠‡∏ô‡∏Ñ‡∏∞",
            "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡πà‡∏∞", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏à‡πâ‡∏≤", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö"
        ]

        if any(pattern in message for pattern in payment_cod_response_patterns):
            used_intent = "payment_cod"
        elif any(pattern in message for pattern in payment_transfer_response_patterns):
            used_intent = "payment_transfer"

        # ‡πÉ‡∏´‡πâ COD inquiry ‡∏°‡∏µ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ payment intents ‡∏≠‡∏∑‡πà‡∏ô
        elif has_cod_inquiry and has_cod_word:
            used_intent = "cod_inquiry"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment intents ‡∏´‡∏≤‡∏Å GPT ‡πÑ‡∏°‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô cod_inquiry
        elif used_intent == "fallback" or intent_result.confidence < 0.5:
            payment_cod_keywords = ["‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", "COD", "cod"]
            payment_transfer_keywords = ["‡πÇ‡∏≠‡∏ô", "‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£", "PromptPay", "promptpay", "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ"]
            order_edit_keywords = ["‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "‡πÅ‡∏Å‡πâ", "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ", "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", "‡∏°‡∏±‡∏ô‡∏Ç‡∏≤‡∏ß‡πÑ‡∏õ", "‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∑‡πà‡∏ô"]
            fabric_quality_keywords = ["‡∏ú‡πâ‡∏≤", "‡∏ö‡∏≤‡∏á", "‡∏´‡∏ô‡∏≤", "‡∏ô‡∏∏‡πà‡∏°", "‡πÅ‡∏Ç‡πá‡∏á", "‡∏ã‡∏±‡∏Å", "‡∏ß‡∏±‡∏™‡∏î‡∏∏", "‡∏Ñ‡∏≠‡∏ï‡∏ï‡∏≠‡∏ô", "‡∏™‡πÅ‡∏õ‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ã‡πå", "‡∏¢‡∏∑‡∏î", "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û"]
            product_length_keywords = ["‡∏¢‡∏≤‡∏ß", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß", "‡∏Ç‡∏ô‡∏≤‡∏î", "‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£", "‡∏ã‡∏°", "‡πÄ‡∏°‡∏ï‡∏£", "‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà", "‡∏Å‡∏µ‡πà", "‡∏°‡∏¥‡∏ï‡∏¥"]

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢ - ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            colors = ["‡πÇ‡∏Å‡πÇ‡∏Å‡πâ", "‡πÇ‡∏Å‡πÇ‡∏Å", "‡∏î‡∏≥", "‡∏Ç‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ä‡∏°‡∏û‡∏π", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏ó‡∏≤", "‡∏Å‡∏£‡∏°"]
            colors_found = [color for color in colors if color in message]

            message_lower = message.lower()
            if any(keyword in message for keyword in payment_cod_keywords):
                used_intent = "payment_cod"
            elif any(keyword in message_lower for keyword in payment_transfer_keywords):
                used_intent = "payment_transfer"
            elif any(keyword in message for keyword in order_edit_keywords):
                used_intent = "order_edit"
            elif len(colors_found) >= 2 and not any(keyword in message for keyword in fabric_quality_keywords) and not any(keyword in message for keyword in product_length_keywords):
                # ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                used_intent = "color_multiple"
            elif len(colors_found) == 1 and not any(keyword in message for keyword in fabric_quality_keywords) and not any(keyword in message for keyword in product_length_keywords):
                # ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                used_intent = "color"
            elif any(keyword in message for keyword in product_length_keywords):
                used_intent = "product_length"
            elif any(keyword in message for keyword in fabric_quality_keywords):
                used_intent = "fabric_quality"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö address intents ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å payment_cod
        if user_context.get('last_intent') == "payment_cod":
            address_info = self._analyze_address(message)
            if address_info['has_phone'] or address_info['has_address'] or address_info['has_name']:
                # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if address_info['has_name'] and address_info['has_address'] and address_info['has_phone']:
                    used_intent = "address_received"
                    user_context['order_info']['address_info'] = address_info
                else:
                    used_intent = "address_incomplete"

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
        if used_intent == 'color_with_quantity':
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            color_info = self._extract_color_quantity(message)
            user_context['order_info'].update(color_info)
        elif used_intent == 'color_multiple':
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏µ (1 ‡∏™‡∏µ = 1 ‡∏ï‡∏±‡∏ß)
            color_info = self._extract_color_quantity(message)
            user_context['order_info'].update(color_info)
        elif used_intent == 'size_after_color_quantity':
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ã‡∏™‡πå (‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ã‡∏™‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ XXL ‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô XL)
            sizes = ["XXL", "XL", "M", "L"]  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏ß‡πÑ‡∏õ‡∏™‡∏±‡πâ‡∏ô
            for size in sizes:
                if size in message.upper():
                    user_context['order_info']['size'] = size
                    break
        elif used_intent == 'size_only':
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if user_context['order_info'].get('total_quantity', 0) > 0:
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ã‡∏™‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô order_confirm
                sizes = ["XXL", "XL", "M", "L"]
                for size in sizes:
                    if size in message.upper():
                        user_context['order_info']['size'] = size
                        used_intent = "order_confirm"
                        break
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ã‡∏™‡πå‡πÑ‡∏ß‡πâ
                sizes = ["XXL", "XL", "M", "L"]
                for size in sizes:
                    if size in message.upper():
                        user_context['order_info']['size'] = size
                        break
        elif used_intent == 'address_received' and 'address_info' not in user_context['order_info']:
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡πá‡∏ö
            address_info = self._analyze_address(message)
            user_context['order_info']['address_info'] = address_info

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        if used_intent == 'smart_fallback':
            reply = self._generate_smart_fallback(message)
        else:
            reply = self.get_reply(used_intent, message, user_context)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        image_url = None
        if used_intent in self.replies and self.replies[used_intent].get('image_required', False):
            image_url = self._get_image_url(used_intent, message)

        # ‡πÄ‡∏Å‡πá‡∏ö intent ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        user_context['last_intent'] = used_intent
        user_context['last_message'] = message

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô conversation history (sliding window)
        if 'conversation_history' not in user_context:
            user_context['conversation_history'] = []

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user_context['conversation_history'].append({
            'role': 'user',
            'content': message,
            'intent': used_intent
        })

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if reply:
            user_context['conversation_history'].append({
                'role': 'bot',
                'content': reply,
                'intent': used_intent
            })

        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î history ‡πÑ‡∏ß‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (sliding window)
        if len(user_context['conversation_history']) > 10:
            user_context['conversation_history'] = user_context['conversation_history'][-10:]

        result = {
            'detected_intent': intent_result.intent,
            'confidence': intent_result.confidence,
            'reason': intent_result.reason,
            'used_intent': used_intent,
            'reply': reply,
            'original_message': message,
            'order_info': user_context['order_info'].copy()
        }

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° image_url ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if image_url:
            result['image_url'] = image_url

        return result

    def _get_image_url(self, intent: str, message: str) -> str:
        """‡∏î‡∏∂‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏° intent ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        if not self.product_images:
            return None

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ intent ‡∏°‡∏µ image_type ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        intent_config = self.replies.get(intent, {})
        image_type = intent_config.get("image_type")

        if image_type:
            # ‡πÉ‡∏ä‡πâ image_type ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô replies.json
            if image_type == "product_catalog":
                return self.product_images.get("product_catalog")
            elif image_type == "size_chart":
                return self.product_images.get("size_chart")

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö show_product_image - ‡∏´‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏î‡∏π
        if intent == "show_product_image":
            colors = ["‡πÇ‡∏Å‡πÇ‡∏Å‡πâ", "‡πÇ‡∏Å‡πÇ‡∏Å", "‡∏î‡∏≥", "‡∏Ç‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°", "‡∏ä‡∏°‡∏û‡∏π", "‡∏ü‡πâ‡∏≤", "‡πÄ‡∏ó‡∏≤", "‡∏Å‡∏£‡∏°"]
            for color in colors:
                if color in message:
                    return self.product_images.get("product_images", {}).get(color)
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏µ ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏£‡∏Å
            return list(self.product_images.get("product_images", {}).values())[0] if self.product_images.get("product_images") else None

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö show_size_chart
        elif intent == "show_size_chart":
            return self.product_images.get("size_chart")

        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö show_catalog
        elif intent == "show_catalog":
            return self.product_images.get("product_catalog")

        return None

    def reset_manual_mode(self, user_id: str) -> bool:
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï manual mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        if user_id in self.user_contexts:
            self.user_contexts[user_id]['manual_mode'] = False
            return True
        return False

    def get_manual_mode_status(self, user_id: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ manual mode ‡∏Ç‡∏≠‡∏á user"""
        user_context = self._get_user_context(user_id)
        return user_context.get('manual_mode', False)
